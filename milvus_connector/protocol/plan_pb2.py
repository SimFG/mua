# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: plan.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from . import schema_pb2 as schema__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\nplan.proto\x12\x11milvus.proto.plan\x1a\x0cschema.proto\"\x98\x01\n\x0cGenericValue\x12\x12\n\x08\x62ool_val\x18\x01 \x01(\x08H\x00\x12\x13\n\tint64_val\x18\x02 \x01(\x03H\x00\x12\x13\n\tfloat_val\x18\x03 \x01(\x01H\x00\x12\x14\n\nstring_val\x18\x04 \x01(\tH\x00\x12-\n\tarray_val\x18\x05 \x01(\x0b\x32\x18.milvus.proto.plan.ArrayH\x00\x42\x05\n\x03val\"\x7f\n\x05\x41rray\x12.\n\x05\x61rray\x18\x01 \x03(\x0b\x32\x1f.milvus.proto.plan.GenericValue\x12\x11\n\tsame_type\x18\x02 \x01(\x08\x12\x33\n\x0c\x65lement_type\x18\x03 \x01(\x0e\x32\x1d.milvus.proto.schema.DataType\"w\n\tQueryInfo\x12\x0c\n\x04topk\x18\x01 \x01(\x03\x12\x13\n\x0bmetric_type\x18\x03 \x01(\t\x12\x15\n\rsearch_params\x18\x04 \x01(\t\x12\x15\n\rround_decimal\x18\x05 \x01(\x03\x12\x19\n\x11group_by_field_id\x18\x06 \x01(\x03\"\xdf\x01\n\nColumnInfo\x12\x10\n\x08\x66ield_id\x18\x01 \x01(\x03\x12\x30\n\tdata_type\x18\x02 \x01(\x0e\x32\x1d.milvus.proto.schema.DataType\x12\x16\n\x0eis_primary_key\x18\x03 \x01(\x08\x12\x11\n\tis_autoID\x18\x04 \x01(\x08\x12\x13\n\x0bnested_path\x18\x05 \x03(\t\x12\x18\n\x10is_partition_key\x18\x06 \x01(\x08\x12\x33\n\x0c\x65lement_type\x18\x07 \x01(\x0e\x32\x1d.milvus.proto.schema.DataType\"9\n\nColumnExpr\x12+\n\x04info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\"9\n\nExistsExpr\x12+\n\x04info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\";\n\tValueExpr\x12.\n\x05value\x18\x01 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\"\x9b\x01\n\x0eUnaryRangeExpr\x12\x32\n\x0b\x63olumn_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12%\n\x02op\x18\x02 \x01(\x0e\x32\x19.milvus.proto.plan.OpType\x12.\n\x05value\x18\x03 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\"\xe3\x01\n\x0f\x42inaryRangeExpr\x12\x32\n\x0b\x63olumn_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12\x17\n\x0flower_inclusive\x18\x02 \x01(\x08\x12\x17\n\x0fupper_inclusive\x18\x03 \x01(\x08\x12\x34\n\x0blower_value\x18\x04 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\x12\x34\n\x0bupper_value\x18\x05 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\"\xa7\x01\n\x0b\x43ompareExpr\x12\x37\n\x10left_column_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12\x38\n\x11right_column_info\x18\x02 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12%\n\x02op\x18\x03 \x01(\x0e\x32\x19.milvus.proto.plan.OpType\"\x84\x01\n\x08TermExpr\x12\x32\n\x0b\x63olumn_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12/\n\x06values\x18\x02 \x03(\x0b\x32\x1f.milvus.proto.plan.GenericValue\x12\x13\n\x0bis_in_field\x18\x03 \x01(\x08\"\x94\x02\n\x10JSONContainsExpr\x12\x32\n\x0b\x63olumn_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12\x31\n\x08\x65lements\x18\x02 \x03(\x0b\x32\x1f.milvus.proto.plan.GenericValue\x12\x36\n\x02op\x18\x03 \x01(\x0e\x32*.milvus.proto.plan.JSONContainsExpr.JSONOp\x12\x1a\n\x12\x65lements_same_type\x18\x04 \x01(\x08\"E\n\x06JSONOp\x12\x0b\n\x07Invalid\x10\x00\x12\x0c\n\x08\x43ontains\x10\x01\x12\x0f\n\x0b\x43ontainsAll\x10\x02\x12\x0f\n\x0b\x43ontainsAny\x10\x03\"\x86\x01\n\tUnaryExpr\x12\x30\n\x02op\x18\x01 \x01(\x0e\x32$.milvus.proto.plan.UnaryExpr.UnaryOp\x12&\n\x05\x63hild\x18\x02 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\"\x1f\n\x07UnaryOp\x12\x0b\n\x07Invalid\x10\x00\x12\x07\n\x03Not\x10\x01\"\xc7\x01\n\nBinaryExpr\x12\x32\n\x02op\x18\x01 \x01(\x0e\x32&.milvus.proto.plan.BinaryExpr.BinaryOp\x12%\n\x04left\x18\x02 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\x12&\n\x05right\x18\x03 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\"6\n\x08\x42inaryOp\x12\x0b\n\x07Invalid\x10\x00\x12\x0e\n\nLogicalAnd\x10\x01\x12\r\n\tLogicalOr\x10\x02\"\xad\x01\n\rBinaryArithOp\x12\x32\n\x0b\x63olumn_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12\x30\n\x08\x61rith_op\x18\x02 \x01(\x0e\x32\x1e.milvus.proto.plan.ArithOpType\x12\x36\n\rright_operand\x18\x03 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\"\x8c\x01\n\x0f\x42inaryArithExpr\x12%\n\x04left\x18\x01 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\x12&\n\x05right\x18\x02 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\x12*\n\x02op\x18\x03 \x01(\x0e\x32\x1e.milvus.proto.plan.ArithOpType\"\x91\x02\n\x1a\x42inaryArithOpEvalRangeExpr\x12\x32\n\x0b\x63olumn_info\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnInfo\x12\x30\n\x08\x61rith_op\x18\x02 \x01(\x0e\x32\x1e.milvus.proto.plan.ArithOpType\x12\x36\n\rright_operand\x18\x03 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\x12%\n\x02op\x18\x04 \x01(\x0e\x32\x19.milvus.proto.plan.OpType\x12.\n\x05value\x18\x05 \x01(\x0b\x32\x1f.milvus.proto.plan.GenericValue\"\x10\n\x0e\x41lwaysTrueExpr\"\x9f\x06\n\x04\x45xpr\x12\x30\n\tterm_expr\x18\x01 \x01(\x0b\x32\x1b.milvus.proto.plan.TermExprH\x00\x12\x32\n\nunary_expr\x18\x02 \x01(\x0b\x32\x1c.milvus.proto.plan.UnaryExprH\x00\x12\x34\n\x0b\x62inary_expr\x18\x03 \x01(\x0b\x32\x1d.milvus.proto.plan.BinaryExprH\x00\x12\x36\n\x0c\x63ompare_expr\x18\x04 \x01(\x0b\x32\x1e.milvus.proto.plan.CompareExprH\x00\x12=\n\x10unary_range_expr\x18\x05 \x01(\x0b\x32!.milvus.proto.plan.UnaryRangeExprH\x00\x12?\n\x11\x62inary_range_expr\x18\x06 \x01(\x0b\x32\".milvus.proto.plan.BinaryRangeExprH\x00\x12X\n\x1f\x62inary_arith_op_eval_range_expr\x18\x07 \x01(\x0b\x32-.milvus.proto.plan.BinaryArithOpEvalRangeExprH\x00\x12?\n\x11\x62inary_arith_expr\x18\x08 \x01(\x0b\x32\".milvus.proto.plan.BinaryArithExprH\x00\x12\x32\n\nvalue_expr\x18\t \x01(\x0b\x32\x1c.milvus.proto.plan.ValueExprH\x00\x12\x34\n\x0b\x63olumn_expr\x18\n \x01(\x0b\x32\x1d.milvus.proto.plan.ColumnExprH\x00\x12\x34\n\x0b\x65xists_expr\x18\x0b \x01(\x0b\x32\x1d.milvus.proto.plan.ExistsExprH\x00\x12=\n\x10\x61lways_true_expr\x18\x0c \x01(\x0b\x32!.milvus.proto.plan.AlwaysTrueExprH\x00\x12\x41\n\x12json_contains_expr\x18\r \x01(\x0b\x32#.milvus.proto.plan.JSONContainsExprH\x00\x42\x06\n\x04\x65xpr\"\xca\x01\n\nVectorANNS\x12\x32\n\x0bvector_type\x18\x01 \x01(\x0e\x32\x1d.milvus.proto.plan.VectorType\x12\x10\n\x08\x66ield_id\x18\x02 \x01(\x03\x12+\n\npredicates\x18\x03 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\x12\x30\n\nquery_info\x18\x04 \x01(\x0b\x32\x1c.milvus.proto.plan.QueryInfo\x12\x17\n\x0fplaceholder_tag\x18\x05 \x01(\t\"]\n\rQueryPlanNode\x12+\n\npredicates\x18\x01 \x01(\x0b\x32\x17.milvus.proto.plan.Expr\x12\x10\n\x08is_count\x18\x02 \x01(\x08\x12\r\n\x05limit\x18\x03 \x01(\x03\"\xc4\x01\n\x08PlanNode\x12\x34\n\x0bvector_anns\x18\x01 \x01(\x0b\x32\x1d.milvus.proto.plan.VectorANNSH\x00\x12-\n\npredicates\x18\x02 \x01(\x0b\x32\x17.milvus.proto.plan.ExprH\x00\x12\x31\n\x05query\x18\x04 \x01(\x0b\x32 .milvus.proto.plan.QueryPlanNodeH\x00\x12\x18\n\x10output_field_ids\x18\x03 \x03(\x03\x42\x06\n\x04node*\xba\x01\n\x06OpType\x12\x0b\n\x07Invalid\x10\x00\x12\x0f\n\x0bGreaterThan\x10\x01\x12\x10\n\x0cGreaterEqual\x10\x02\x12\x0c\n\x08LessThan\x10\x03\x12\r\n\tLessEqual\x10\x04\x12\t\n\x05\x45qual\x10\x05\x12\x0c\n\x08NotEqual\x10\x06\x12\x0f\n\x0bPrefixMatch\x10\x07\x12\x10\n\x0cPostfixMatch\x10\x08\x12\t\n\x05Match\x10\t\x12\t\n\x05Range\x10\n\x12\x06\n\x02In\x10\x0b\x12\t\n\x05NotIn\x10\x0c*X\n\x0b\x41rithOpType\x12\x0b\n\x07Unknown\x10\x00\x12\x07\n\x03\x41\x64\x64\x10\x01\x12\x07\n\x03Sub\x10\x02\x12\x07\n\x03Mul\x10\x03\x12\x07\n\x03\x44iv\x10\x04\x12\x07\n\x03Mod\x10\x05\x12\x0f\n\x0b\x41rrayLength\x10\x06*m\n\nVectorType\x12\x10\n\x0c\x42inaryVector\x10\x00\x12\x0f\n\x0b\x46loatVector\x10\x01\x12\x11\n\rFloat16Vector\x10\x02\x12\x12\n\x0e\x42\x46loat16Vector\x10\x03\x12\x15\n\x11SparseFloatVector\x10\x04\x42\x33Z1github.com/milvus-io/milvus/internal/proto/planpbb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'plan_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'Z1github.com/milvus-io/milvus/internal/proto/planpb'
  _globals['_OPTYPE']._serialized_start=4083
  _globals['_OPTYPE']._serialized_end=4269
  _globals['_ARITHOPTYPE']._serialized_start=4271
  _globals['_ARITHOPTYPE']._serialized_end=4359
  _globals['_VECTORTYPE']._serialized_start=4361
  _globals['_VECTORTYPE']._serialized_end=4470
  _globals['_GENERICVALUE']._serialized_start=48
  _globals['_GENERICVALUE']._serialized_end=200
  _globals['_ARRAY']._serialized_start=202
  _globals['_ARRAY']._serialized_end=329
  _globals['_QUERYINFO']._serialized_start=331
  _globals['_QUERYINFO']._serialized_end=450
  _globals['_COLUMNINFO']._serialized_start=453
  _globals['_COLUMNINFO']._serialized_end=676
  _globals['_COLUMNEXPR']._serialized_start=678
  _globals['_COLUMNEXPR']._serialized_end=735
  _globals['_EXISTSEXPR']._serialized_start=737
  _globals['_EXISTSEXPR']._serialized_end=794
  _globals['_VALUEEXPR']._serialized_start=796
  _globals['_VALUEEXPR']._serialized_end=855
  _globals['_UNARYRANGEEXPR']._serialized_start=858
  _globals['_UNARYRANGEEXPR']._serialized_end=1013
  _globals['_BINARYRANGEEXPR']._serialized_start=1016
  _globals['_BINARYRANGEEXPR']._serialized_end=1243
  _globals['_COMPAREEXPR']._serialized_start=1246
  _globals['_COMPAREEXPR']._serialized_end=1413
  _globals['_TERMEXPR']._serialized_start=1416
  _globals['_TERMEXPR']._serialized_end=1548
  _globals['_JSONCONTAINSEXPR']._serialized_start=1551
  _globals['_JSONCONTAINSEXPR']._serialized_end=1827
  _globals['_JSONCONTAINSEXPR_JSONOP']._serialized_start=1758
  _globals['_JSONCONTAINSEXPR_JSONOP']._serialized_end=1827
  _globals['_UNARYEXPR']._serialized_start=1830
  _globals['_UNARYEXPR']._serialized_end=1964
  _globals['_UNARYEXPR_UNARYOP']._serialized_start=1933
  _globals['_UNARYEXPR_UNARYOP']._serialized_end=1964
  _globals['_BINARYEXPR']._serialized_start=1967
  _globals['_BINARYEXPR']._serialized_end=2166
  _globals['_BINARYEXPR_BINARYOP']._serialized_start=2112
  _globals['_BINARYEXPR_BINARYOP']._serialized_end=2166
  _globals['_BINARYARITHOP']._serialized_start=2169
  _globals['_BINARYARITHOP']._serialized_end=2342
  _globals['_BINARYARITHEXPR']._serialized_start=2345
  _globals['_BINARYARITHEXPR']._serialized_end=2485
  _globals['_BINARYARITHOPEVALRANGEEXPR']._serialized_start=2488
  _globals['_BINARYARITHOPEVALRANGEEXPR']._serialized_end=2761
  _globals['_ALWAYSTRUEEXPR']._serialized_start=2763
  _globals['_ALWAYSTRUEEXPR']._serialized_end=2779
  _globals['_EXPR']._serialized_start=2782
  _globals['_EXPR']._serialized_end=3581
  _globals['_VECTORANNS']._serialized_start=3584
  _globals['_VECTORANNS']._serialized_end=3786
  _globals['_QUERYPLANNODE']._serialized_start=3788
  _globals['_QUERYPLANNODE']._serialized_end=3881
  _globals['_PLANNODE']._serialized_start=3884
  _globals['_PLANNODE']._serialized_end=4080
# @@protoc_insertion_point(module_scope)
