# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import internal_pb2 as internal__pb2
from . import milvus_pb2 as milvus__pb2
from . import proxy_pb2 as proxy__pb2
from . import root_coord_pb2 as root__coord__pb2


class RootCoordStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetComponentStates = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/GetComponentStates',
                request_serializer=milvus__pb2.GetComponentStatesRequest.SerializeToString,
                response_deserializer=milvus__pb2.ComponentStates.FromString,
                )
        self.GetTimeTickChannel = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/GetTimeTickChannel',
                request_serializer=internal__pb2.GetTimeTickChannelRequest.SerializeToString,
                response_deserializer=milvus__pb2.StringResponse.FromString,
                )
        self.GetStatisticsChannel = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/GetStatisticsChannel',
                request_serializer=internal__pb2.GetStatisticsChannelRequest.SerializeToString,
                response_deserializer=milvus__pb2.StringResponse.FromString,
                )
        self.CreateCollection = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CreateCollection',
                request_serializer=milvus__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DropCollection = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DropCollection',
                request_serializer=milvus__pb2.DropCollectionRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.HasCollection = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/HasCollection',
                request_serializer=milvus__pb2.HasCollectionRequest.SerializeToString,
                response_deserializer=milvus__pb2.BoolResponse.FromString,
                )
        self.DescribeCollection = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DescribeCollection',
                request_serializer=milvus__pb2.DescribeCollectionRequest.SerializeToString,
                response_deserializer=milvus__pb2.DescribeCollectionResponse.FromString,
                )
        self.DescribeCollectionInternal = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DescribeCollectionInternal',
                request_serializer=milvus__pb2.DescribeCollectionRequest.SerializeToString,
                response_deserializer=milvus__pb2.DescribeCollectionResponse.FromString,
                )
        self.CreateAlias = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CreateAlias',
                request_serializer=milvus__pb2.CreateAliasRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DropAlias = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DropAlias',
                request_serializer=milvus__pb2.DropAliasRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.AlterAlias = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/AlterAlias',
                request_serializer=milvus__pb2.AlterAliasRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DescribeAlias = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DescribeAlias',
                request_serializer=milvus__pb2.DescribeAliasRequest.SerializeToString,
                response_deserializer=milvus__pb2.DescribeAliasResponse.FromString,
                )
        self.ListAliases = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ListAliases',
                request_serializer=milvus__pb2.ListAliasesRequest.SerializeToString,
                response_deserializer=milvus__pb2.ListAliasesResponse.FromString,
                )
        self.ShowCollections = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ShowCollections',
                request_serializer=milvus__pb2.ShowCollectionsRequest.SerializeToString,
                response_deserializer=milvus__pb2.ShowCollectionsResponse.FromString,
                )
        self.AlterCollection = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/AlterCollection',
                request_serializer=milvus__pb2.AlterCollectionRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.CreatePartition = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CreatePartition',
                request_serializer=milvus__pb2.CreatePartitionRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DropPartition = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DropPartition',
                request_serializer=milvus__pb2.DropPartitionRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.HasPartition = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/HasPartition',
                request_serializer=milvus__pb2.HasPartitionRequest.SerializeToString,
                response_deserializer=milvus__pb2.BoolResponse.FromString,
                )
        self.ShowPartitions = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ShowPartitions',
                request_serializer=milvus__pb2.ShowPartitionsRequest.SerializeToString,
                response_deserializer=milvus__pb2.ShowPartitionsResponse.FromString,
                )
        self.ShowPartitionsInternal = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ShowPartitionsInternal',
                request_serializer=milvus__pb2.ShowPartitionsRequest.SerializeToString,
                response_deserializer=milvus__pb2.ShowPartitionsResponse.FromString,
                )
        self.ShowSegments = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ShowSegments',
                request_serializer=milvus__pb2.ShowSegmentsRequest.SerializeToString,
                response_deserializer=milvus__pb2.ShowSegmentsResponse.FromString,
                )
        self.AllocTimestamp = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/AllocTimestamp',
                request_serializer=root__coord__pb2.AllocTimestampRequest.SerializeToString,
                response_deserializer=root__coord__pb2.AllocTimestampResponse.FromString,
                )
        self.AllocID = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/AllocID',
                request_serializer=root__coord__pb2.AllocIDRequest.SerializeToString,
                response_deserializer=root__coord__pb2.AllocIDResponse.FromString,
                )
        self.UpdateChannelTimeTick = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/UpdateChannelTimeTick',
                request_serializer=internal__pb2.ChannelTimeTickMsg.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.InvalidateCollectionMetaCache = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/InvalidateCollectionMetaCache',
                request_serializer=proxy__pb2.InvalidateCollMetaCacheRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.ShowConfigurations = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ShowConfigurations',
                request_serializer=internal__pb2.ShowConfigurationsRequest.SerializeToString,
                response_deserializer=internal__pb2.ShowConfigurationsResponse.FromString,
                )
        self.GetMetrics = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/GetMetrics',
                request_serializer=milvus__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=milvus__pb2.GetMetricsResponse.FromString,
                )
        self.Import = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/Import',
                request_serializer=milvus__pb2.ImportRequest.SerializeToString,
                response_deserializer=milvus__pb2.ImportResponse.FromString,
                )
        self.GetImportState = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/GetImportState',
                request_serializer=milvus__pb2.GetImportStateRequest.SerializeToString,
                response_deserializer=milvus__pb2.GetImportStateResponse.FromString,
                )
        self.ListImportTasks = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ListImportTasks',
                request_serializer=milvus__pb2.ListImportTasksRequest.SerializeToString,
                response_deserializer=milvus__pb2.ListImportTasksResponse.FromString,
                )
        self.ReportImport = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ReportImport',
                request_serializer=root__coord__pb2.ImportResult.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.CreateCredential = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CreateCredential',
                request_serializer=internal__pb2.CredentialInfo.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.UpdateCredential = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/UpdateCredential',
                request_serializer=internal__pb2.CredentialInfo.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DeleteCredential = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DeleteCredential',
                request_serializer=milvus__pb2.DeleteCredentialRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.ListCredUsers = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ListCredUsers',
                request_serializer=milvus__pb2.ListCredUsersRequest.SerializeToString,
                response_deserializer=milvus__pb2.ListCredUsersResponse.FromString,
                )
        self.GetCredential = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/GetCredential',
                request_serializer=root__coord__pb2.GetCredentialRequest.SerializeToString,
                response_deserializer=root__coord__pb2.GetCredentialResponse.FromString,
                )
        self.CreateRole = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CreateRole',
                request_serializer=milvus__pb2.CreateRoleRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DropRole = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DropRole',
                request_serializer=milvus__pb2.DropRoleRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.OperateUserRole = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/OperateUserRole',
                request_serializer=milvus__pb2.OperateUserRoleRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.SelectRole = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/SelectRole',
                request_serializer=milvus__pb2.SelectRoleRequest.SerializeToString,
                response_deserializer=milvus__pb2.SelectRoleResponse.FromString,
                )
        self.SelectUser = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/SelectUser',
                request_serializer=milvus__pb2.SelectUserRequest.SerializeToString,
                response_deserializer=milvus__pb2.SelectUserResponse.FromString,
                )
        self.OperatePrivilege = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/OperatePrivilege',
                request_serializer=milvus__pb2.OperatePrivilegeRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.SelectGrant = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/SelectGrant',
                request_serializer=milvus__pb2.SelectGrantRequest.SerializeToString,
                response_deserializer=milvus__pb2.SelectGrantResponse.FromString,
                )
        self.ListPolicy = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ListPolicy',
                request_serializer=internal__pb2.ListPolicyRequest.SerializeToString,
                response_deserializer=internal__pb2.ListPolicyResponse.FromString,
                )
        self.CheckHealth = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CheckHealth',
                request_serializer=milvus__pb2.CheckHealthRequest.SerializeToString,
                response_deserializer=milvus__pb2.CheckHealthResponse.FromString,
                )
        self.RenameCollection = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/RenameCollection',
                request_serializer=milvus__pb2.RenameCollectionRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.CreateDatabase = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/CreateDatabase',
                request_serializer=milvus__pb2.CreateDatabaseRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.DropDatabase = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/DropDatabase',
                request_serializer=milvus__pb2.DropDatabaseRequest.SerializeToString,
                response_deserializer=common__pb2.Status.FromString,
                )
        self.ListDatabases = channel.unary_unary(
                '/milvus.proto.rootcoord.RootCoord/ListDatabases',
                request_serializer=milvus__pb2.ListDatabasesRequest.SerializeToString,
                response_deserializer=milvus__pb2.ListDatabasesResponse.FromString,
                )


class RootCoordServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetComponentStates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeTickChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatisticsChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollection(self, request, context):
        """*
        @brief This method is used to create collection

        @param CreateCollectionRequest, use to provide collection information to be created.

        @return Status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropCollection(self, request, context):
        """*
        @brief This method is used to delete collection.

        @param DropCollectionRequest, collection name is going to be deleted.

        @return Status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasCollection(self, request, context):
        """*
        @brief This method is used to test collection existence.

        @param HasCollectionRequest, collection name is going to be tested.

        @return BoolResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeCollection(self, request, context):
        """*
        @brief This method is used to get collection schema.

        @param DescribeCollectionRequest, target collection name.

        @return CollectionSchema
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeCollectionInternal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlterAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAliases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowCollections(self, request, context):
        """*
        @brief This method is used to list all collections.

        @return StringListResponse, collection name list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlterCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePartition(self, request, context):
        """*
        @brief This method is used to create partition

        @return Status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropPartition(self, request, context):
        """*
        @brief This method is used to drop partition

        @return Status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasPartition(self, request, context):
        """*
        @brief This method is used to test partition existence.

        @return BoolResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowPartitions(self, request, context):
        """*
        @brief This method is used to show partition information

        @param ShowPartitionRequest, target collection name.

        @return StringListResponse
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowPartitionsInternal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowSegments(self, request, context):
        """rpc DescribeSegment(milvus.DescribeSegmentRequest) returns (milvus.DescribeSegmentResponse) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocTimestamp(self, request, context):
        """rpc CreateIndex(milvus.CreateIndexRequest) returns (common.Status) {}
        rpc DescribeIndex(milvus.DescribeIndexRequest) returns (milvus.DescribeIndexResponse) {}
        rpc DropIndex(milvus.DropIndexRequest) returns (common.Status) {}
        rpc GetIndexState(milvus.GetIndexStateRequest) returns (milvus.GetIndexStateResponse) {}

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateChannelTimeTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvalidateCollectionMetaCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowConfigurations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Import(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImportState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListImportTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportImport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCredential(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCredential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCredUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCredential(self, request, context):
        """userd by proxy, not exposed to sdk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OperateUserRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OperatePrivilege(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectGrant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatabases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RootCoordServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetComponentStates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetComponentStates,
                    request_deserializer=milvus__pb2.GetComponentStatesRequest.FromString,
                    response_serializer=milvus__pb2.ComponentStates.SerializeToString,
            ),
            'GetTimeTickChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeTickChannel,
                    request_deserializer=internal__pb2.GetTimeTickChannelRequest.FromString,
                    response_serializer=milvus__pb2.StringResponse.SerializeToString,
            ),
            'GetStatisticsChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatisticsChannel,
                    request_deserializer=internal__pb2.GetStatisticsChannelRequest.FromString,
                    response_serializer=milvus__pb2.StringResponse.SerializeToString,
            ),
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=milvus__pb2.CreateCollectionRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DropCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DropCollection,
                    request_deserializer=milvus__pb2.DropCollectionRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'HasCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.HasCollection,
                    request_deserializer=milvus__pb2.HasCollectionRequest.FromString,
                    response_serializer=milvus__pb2.BoolResponse.SerializeToString,
            ),
            'DescribeCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeCollection,
                    request_deserializer=milvus__pb2.DescribeCollectionRequest.FromString,
                    response_serializer=milvus__pb2.DescribeCollectionResponse.SerializeToString,
            ),
            'DescribeCollectionInternal': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeCollectionInternal,
                    request_deserializer=milvus__pb2.DescribeCollectionRequest.FromString,
                    response_serializer=milvus__pb2.DescribeCollectionResponse.SerializeToString,
            ),
            'CreateAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAlias,
                    request_deserializer=milvus__pb2.CreateAliasRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DropAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.DropAlias,
                    request_deserializer=milvus__pb2.DropAliasRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'AlterAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.AlterAlias,
                    request_deserializer=milvus__pb2.AlterAliasRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DescribeAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeAlias,
                    request_deserializer=milvus__pb2.DescribeAliasRequest.FromString,
                    response_serializer=milvus__pb2.DescribeAliasResponse.SerializeToString,
            ),
            'ListAliases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAliases,
                    request_deserializer=milvus__pb2.ListAliasesRequest.FromString,
                    response_serializer=milvus__pb2.ListAliasesResponse.SerializeToString,
            ),
            'ShowCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowCollections,
                    request_deserializer=milvus__pb2.ShowCollectionsRequest.FromString,
                    response_serializer=milvus__pb2.ShowCollectionsResponse.SerializeToString,
            ),
            'AlterCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.AlterCollection,
                    request_deserializer=milvus__pb2.AlterCollectionRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'CreatePartition': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePartition,
                    request_deserializer=milvus__pb2.CreatePartitionRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DropPartition': grpc.unary_unary_rpc_method_handler(
                    servicer.DropPartition,
                    request_deserializer=milvus__pb2.DropPartitionRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'HasPartition': grpc.unary_unary_rpc_method_handler(
                    servicer.HasPartition,
                    request_deserializer=milvus__pb2.HasPartitionRequest.FromString,
                    response_serializer=milvus__pb2.BoolResponse.SerializeToString,
            ),
            'ShowPartitions': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowPartitions,
                    request_deserializer=milvus__pb2.ShowPartitionsRequest.FromString,
                    response_serializer=milvus__pb2.ShowPartitionsResponse.SerializeToString,
            ),
            'ShowPartitionsInternal': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowPartitionsInternal,
                    request_deserializer=milvus__pb2.ShowPartitionsRequest.FromString,
                    response_serializer=milvus__pb2.ShowPartitionsResponse.SerializeToString,
            ),
            'ShowSegments': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowSegments,
                    request_deserializer=milvus__pb2.ShowSegmentsRequest.FromString,
                    response_serializer=milvus__pb2.ShowSegmentsResponse.SerializeToString,
            ),
            'AllocTimestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocTimestamp,
                    request_deserializer=root__coord__pb2.AllocTimestampRequest.FromString,
                    response_serializer=root__coord__pb2.AllocTimestampResponse.SerializeToString,
            ),
            'AllocID': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocID,
                    request_deserializer=root__coord__pb2.AllocIDRequest.FromString,
                    response_serializer=root__coord__pb2.AllocIDResponse.SerializeToString,
            ),
            'UpdateChannelTimeTick': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateChannelTimeTick,
                    request_deserializer=internal__pb2.ChannelTimeTickMsg.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'InvalidateCollectionMetaCache': grpc.unary_unary_rpc_method_handler(
                    servicer.InvalidateCollectionMetaCache,
                    request_deserializer=proxy__pb2.InvalidateCollMetaCacheRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'ShowConfigurations': grpc.unary_unary_rpc_method_handler(
                    servicer.ShowConfigurations,
                    request_deserializer=internal__pb2.ShowConfigurationsRequest.FromString,
                    response_serializer=internal__pb2.ShowConfigurationsResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=milvus__pb2.GetMetricsRequest.FromString,
                    response_serializer=milvus__pb2.GetMetricsResponse.SerializeToString,
            ),
            'Import': grpc.unary_unary_rpc_method_handler(
                    servicer.Import,
                    request_deserializer=milvus__pb2.ImportRequest.FromString,
                    response_serializer=milvus__pb2.ImportResponse.SerializeToString,
            ),
            'GetImportState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImportState,
                    request_deserializer=milvus__pb2.GetImportStateRequest.FromString,
                    response_serializer=milvus__pb2.GetImportStateResponse.SerializeToString,
            ),
            'ListImportTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListImportTasks,
                    request_deserializer=milvus__pb2.ListImportTasksRequest.FromString,
                    response_serializer=milvus__pb2.ListImportTasksResponse.SerializeToString,
            ),
            'ReportImport': grpc.unary_unary_rpc_method_handler(
                    servicer.ReportImport,
                    request_deserializer=root__coord__pb2.ImportResult.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'CreateCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCredential,
                    request_deserializer=internal__pb2.CredentialInfo.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'UpdateCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCredential,
                    request_deserializer=internal__pb2.CredentialInfo.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DeleteCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCredential,
                    request_deserializer=milvus__pb2.DeleteCredentialRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'ListCredUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCredUsers,
                    request_deserializer=milvus__pb2.ListCredUsersRequest.FromString,
                    response_serializer=milvus__pb2.ListCredUsersResponse.SerializeToString,
            ),
            'GetCredential': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCredential,
                    request_deserializer=root__coord__pb2.GetCredentialRequest.FromString,
                    response_serializer=root__coord__pb2.GetCredentialResponse.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=milvus__pb2.CreateRoleRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DropRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DropRole,
                    request_deserializer=milvus__pb2.DropRoleRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'OperateUserRole': grpc.unary_unary_rpc_method_handler(
                    servicer.OperateUserRole,
                    request_deserializer=milvus__pb2.OperateUserRoleRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'SelectRole': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectRole,
                    request_deserializer=milvus__pb2.SelectRoleRequest.FromString,
                    response_serializer=milvus__pb2.SelectRoleResponse.SerializeToString,
            ),
            'SelectUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectUser,
                    request_deserializer=milvus__pb2.SelectUserRequest.FromString,
                    response_serializer=milvus__pb2.SelectUserResponse.SerializeToString,
            ),
            'OperatePrivilege': grpc.unary_unary_rpc_method_handler(
                    servicer.OperatePrivilege,
                    request_deserializer=milvus__pb2.OperatePrivilegeRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'SelectGrant': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectGrant,
                    request_deserializer=milvus__pb2.SelectGrantRequest.FromString,
                    response_serializer=milvus__pb2.SelectGrantResponse.SerializeToString,
            ),
            'ListPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPolicy,
                    request_deserializer=internal__pb2.ListPolicyRequest.FromString,
                    response_serializer=internal__pb2.ListPolicyResponse.SerializeToString,
            ),
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=milvus__pb2.CheckHealthRequest.FromString,
                    response_serializer=milvus__pb2.CheckHealthResponse.SerializeToString,
            ),
            'RenameCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameCollection,
                    request_deserializer=milvus__pb2.RenameCollectionRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'CreateDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatabase,
                    request_deserializer=milvus__pb2.CreateDatabaseRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'DropDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.DropDatabase,
                    request_deserializer=milvus__pb2.DropDatabaseRequest.FromString,
                    response_serializer=common__pb2.Status.SerializeToString,
            ),
            'ListDatabases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatabases,
                    request_deserializer=milvus__pb2.ListDatabasesRequest.FromString,
                    response_serializer=milvus__pb2.ListDatabasesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'milvus.proto.rootcoord.RootCoord', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RootCoord(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetComponentStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/GetComponentStates',
            milvus__pb2.GetComponentStatesRequest.SerializeToString,
            milvus__pb2.ComponentStates.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimeTickChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/GetTimeTickChannel',
            internal__pb2.GetTimeTickChannelRequest.SerializeToString,
            milvus__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatisticsChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/GetStatisticsChannel',
            internal__pb2.GetStatisticsChannelRequest.SerializeToString,
            milvus__pb2.StringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CreateCollection',
            milvus__pb2.CreateCollectionRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DropCollection',
            milvus__pb2.DropCollectionRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/HasCollection',
            milvus__pb2.HasCollectionRequest.SerializeToString,
            milvus__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DescribeCollection',
            milvus__pb2.DescribeCollectionRequest.SerializeToString,
            milvus__pb2.DescribeCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeCollectionInternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DescribeCollectionInternal',
            milvus__pb2.DescribeCollectionRequest.SerializeToString,
            milvus__pb2.DescribeCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CreateAlias',
            milvus__pb2.CreateAliasRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DropAlias',
            milvus__pb2.DropAliasRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AlterAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/AlterAlias',
            milvus__pb2.AlterAliasRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DescribeAlias',
            milvus__pb2.DescribeAliasRequest.SerializeToString,
            milvus__pb2.DescribeAliasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAliases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ListAliases',
            milvus__pb2.ListAliasesRequest.SerializeToString,
            milvus__pb2.ListAliasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ShowCollections',
            milvus__pb2.ShowCollectionsRequest.SerializeToString,
            milvus__pb2.ShowCollectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AlterCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/AlterCollection',
            milvus__pb2.AlterCollectionRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePartition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CreatePartition',
            milvus__pb2.CreatePartitionRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropPartition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DropPartition',
            milvus__pb2.DropPartitionRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasPartition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/HasPartition',
            milvus__pb2.HasPartitionRequest.SerializeToString,
            milvus__pb2.BoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowPartitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ShowPartitions',
            milvus__pb2.ShowPartitionsRequest.SerializeToString,
            milvus__pb2.ShowPartitionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowPartitionsInternal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ShowPartitionsInternal',
            milvus__pb2.ShowPartitionsRequest.SerializeToString,
            milvus__pb2.ShowPartitionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowSegments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ShowSegments',
            milvus__pb2.ShowSegmentsRequest.SerializeToString,
            milvus__pb2.ShowSegmentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllocTimestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/AllocTimestamp',
            root__coord__pb2.AllocTimestampRequest.SerializeToString,
            root__coord__pb2.AllocTimestampResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllocID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/AllocID',
            root__coord__pb2.AllocIDRequest.SerializeToString,
            root__coord__pb2.AllocIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateChannelTimeTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/UpdateChannelTimeTick',
            internal__pb2.ChannelTimeTickMsg.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvalidateCollectionMetaCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/InvalidateCollectionMetaCache',
            proxy__pb2.InvalidateCollMetaCacheRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShowConfigurations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ShowConfigurations',
            internal__pb2.ShowConfigurationsRequest.SerializeToString,
            internal__pb2.ShowConfigurationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/GetMetrics',
            milvus__pb2.GetMetricsRequest.SerializeToString,
            milvus__pb2.GetMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Import(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/Import',
            milvus__pb2.ImportRequest.SerializeToString,
            milvus__pb2.ImportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetImportState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/GetImportState',
            milvus__pb2.GetImportStateRequest.SerializeToString,
            milvus__pb2.GetImportStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListImportTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ListImportTasks',
            milvus__pb2.ListImportTasksRequest.SerializeToString,
            milvus__pb2.ListImportTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReportImport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ReportImport',
            root__coord__pb2.ImportResult.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CreateCredential',
            internal__pb2.CredentialInfo.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/UpdateCredential',
            internal__pb2.CredentialInfo.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DeleteCredential',
            milvus__pb2.DeleteCredentialRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCredUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ListCredUsers',
            milvus__pb2.ListCredUsersRequest.SerializeToString,
            milvus__pb2.ListCredUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCredential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/GetCredential',
            root__coord__pb2.GetCredentialRequest.SerializeToString,
            root__coord__pb2.GetCredentialResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CreateRole',
            milvus__pb2.CreateRoleRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DropRole',
            milvus__pb2.DropRoleRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OperateUserRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/OperateUserRole',
            milvus__pb2.OperateUserRoleRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/SelectRole',
            milvus__pb2.SelectRoleRequest.SerializeToString,
            milvus__pb2.SelectRoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/SelectUser',
            milvus__pb2.SelectUserRequest.SerializeToString,
            milvus__pb2.SelectUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OperatePrivilege(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/OperatePrivilege',
            milvus__pb2.OperatePrivilegeRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectGrant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/SelectGrant',
            milvus__pb2.SelectGrantRequest.SerializeToString,
            milvus__pb2.SelectGrantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ListPolicy',
            internal__pb2.ListPolicyRequest.SerializeToString,
            internal__pb2.ListPolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CheckHealth',
            milvus__pb2.CheckHealthRequest.SerializeToString,
            milvus__pb2.CheckHealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/RenameCollection',
            milvus__pb2.RenameCollectionRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/CreateDatabase',
            milvus__pb2.CreateDatabaseRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/DropDatabase',
            milvus__pb2.DropDatabaseRequest.SerializeToString,
            common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatabases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/milvus.proto.rootcoord.RootCoord/ListDatabases',
            milvus__pb2.ListDatabasesRequest.SerializeToString,
            milvus__pb2.ListDatabasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
